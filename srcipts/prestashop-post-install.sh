#!/bin/bash
# scripts/prestashop-post-install.sh - Actions post-installation PrestaShop

set -e

echo "üõí PrestaShop Post-Installation"
echo "=============================="

ENV=${1:-"dev"}
TERRAFORM_DIR="./terraform/environments/$ENV"

echo "üéØ Environnement: $ENV"

if [ ! -d "$TERRAFORM_DIR" ]; then
    echo "‚ùå Environnement $ENV introuvable"
    exit 1
fi

cd "$TERRAFORM_DIR"

# R√©cup√©rer les informations du d√©ploiement
echo "üìã R√©cup√©ration des informations..."

if [ ! -f "terraform.tfstate" ]; then
    echo "‚ùå Infrastructure non d√©ploy√©e"
    exit 1
fi

# Fonction pour Container Instances
handle_container_instance() {
    echo "üê≥ Gestion Container Instance..."
    
    RG_NAME=$(terraform output -raw resource_group_name)
    CONTAINER_NAME=$(terraform show -json | jq -r '.values.root_module.child_modules[] | select(.address=="module.container") | .resources[] | select(.type=="azurerm_container_group") | .values.name')
    
    if [ -z "$CONTAINER_NAME" ] || [ "$CONTAINER_NAME" = "null" ]; then
        echo "‚ùå Container Group non trouv√©"
        return 1
    fi
    
    echo "üì¶ Container Group: $CONTAINER_NAME"
    
    # Options pour supprimer le dossier install
    echo ""
    echo "üîß Options pour supprimer le dossier /install:"
    echo "1. Red√©marrer le container (recommand√©)"
    echo "2. Ex√©cuter une commande dans le container"
    echo "3. Modifier la configuration et red√©ployer"
    
    read -p "Choisissez une option (1-3): " option
    
    case $option in
        1)
            restart_container_instance "$RG_NAME" "$CONTAINER_NAME"
            ;;
        2)
            exec_in_container_instance "$RG_NAME" "$CONTAINER_NAME"
            ;;
        3)
            modify_config_and_redeploy "container-instance"
            ;;
        *)
            echo "‚ùå Option invalide"
            ;;
    esac
}

# Fonction pour Container Apps
handle_container_app() {
    echo "üì± Gestion Container App..."
    
    RG_NAME=$(terraform output -raw resource_group_name)
    APP_NAME=$(terraform show -json | jq -r '.values.root_module.child_modules[] | select(.address=="module.container_app") | .resources[] | select(.type=="azurerm_container_app") | .values.name')
    
    if [ -z "$APP_NAME" ] || [ "$APP_NAME" = "null" ]; then
        echo "‚ùå Container App non trouv√©"
        return 1
    fi
    
    echo "üì± Container App: $APP_NAME"
    
    # Options pour Container Apps
    echo ""
    echo "üîß Options pour supprimer le dossier /install:"
    echo "1. Cr√©er une nouvelle r√©vision (recommand√©)"
    echo "2. Ex√©cuter une commande via console"
    echo "3. Modifier la configuration et red√©ployer"
    
    read -p "Choisissez une option (1-3): " option
    
    case $option in
        1)
            create_new_revision "$RG_NAME" "$APP_NAME"
            ;;
        2)
            exec_in_container_app "$RG_NAME" "$APP_NAME"
            ;;
        3)
            modify_config_and_redeploy "container-app"
            ;;
        *)
            echo "‚ùå Option invalide"
            ;;
    esac
}

# Fonction pour red√©marrer Container Instance
restart_container_instance() {
    local rg_name=$1
    local container_name=$2
    
    echo "üîÑ Red√©marrage du Container Instance..."
    
    # Le red√©marrage va d√©clencher un nouveau pull de l'image et r√©initialiser le container
    az container restart --resource-group "$rg_name" --name "$container_name"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Container red√©marr√© avec succ√®s"
        echo "‚è≥ Attendez 2-3 minutes puis v√©rifiez votre site"
        
        # Afficher l'URL
        PRESTASHOP_URL=$(terraform output -raw prestashop_url 2>/dev/null || echo "Non disponible")
        echo "üåê URL: $PRESTASHOP_URL"
    else
        echo "‚ùå Erreur lors du red√©marrage"
    fi
}

# Fonction pour ex√©cuter une commande dans Container Instance
exec_in_container_instance() {
    local rg_name=$1
    local container_name=$2
    
    echo "‚ö†Ô∏è  Ex√©cution de commande dans Container Instance..."
    echo "Cette m√©thode peut ne pas fonctionner selon la configuration"
    
    # Essayer d'ex√©cuter la commande pour supprimer le dossier install
    az container exec \
        --resource-group "$rg_name" \
        --name "$container_name" \
        --exec-command "/bin/bash -c 'rm -rf /var/www/html/install && echo \"Dossier install supprim√©\"'"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Dossier install supprim√©"
    else
        echo "‚ùå Impossible d'ex√©cuter la commande"
        echo "üí° Essayez l'option red√©marrage ou red√©ploiement"
    fi
}

# Fonction pour cr√©er une nouvelle r√©vision Container App
create_new_revision() {
    local rg_name=$1
    local app_name=$2
    
    echo "üöÄ Cr√©ation d'une nouvelle r√©vision Container App..."
    
    # Forcer une nouvelle r√©vision en changeant une variable d'environnement
    az containerapp revision copy \
        --resource-group "$rg_name" \
        --name "$app_name" \
        --from-revision "latest" \
        --env-vars "INSTALL_REMOVED=true"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Nouvelle r√©vision cr√©√©e"
        echo "‚è≥ La nouvelle r√©vision va d√©marrer automatiquement"
        
        # Afficher l'URL
        PRESTASHOP_URL=$(terraform output -raw prestashop_url 2>/dev/null || echo "Non disponible")
        echo "üåê URL: $PRESTASHOP_URL"
    else
        echo "‚ùå Erreur lors de la cr√©ation de r√©vision"
    fi
}

# Fonction pour ex√©cuter une commande dans Container App
exec_in_container_app() {
    local rg_name=$1
    local app_name=$2
    
    echo "‚ö†Ô∏è  Ex√©cution de commande dans Container App..."
    
    # Container Apps n'a pas d'exec direct, mais on peut essayer via console
    echo "üìù Pour Container Apps, utilisez:"
    echo "1. Portail Azure > Container Apps > $app_name > Console"
    echo "2. Ex√©cutez: rm -rf /var/www/html/install"
    echo ""
    echo "Ou utilisez l'option 1 (nouvelle r√©vision) qui est plus fiable"
}

# Fonction pour modifier la configuration et red√©ployer
modify_config_and_redeploy() {
    local service_type=$1
    
    echo "‚öôÔ∏è  Modification de la configuration Terraform..."
    
    if [ "$service_type" = "container-instance" ]; then
        MODULE_DIR="../../modules/container-instance"
    else
        MODULE_DIR="../../modules/container-app"
    fi
    
    # Ajouter une variable pour indiquer que l'installation est termin√©e
    echo "üìù Ajout de la variable PS_INSTALL_COMPLETE..."
    
    # Modifier le main.tf pour ajouter la variable d'environnement
    if [ -f "$MODULE_DIR/main.tf" ]; then
        # Sauvegarder
        cp "$MODULE_DIR/main.tf" "$MODULE_DIR/main.tf.backup"
        
        # Ajouter la variable PS_INSTALL_COMPLETE
        if ! grep -q "PS_INSTALL_COMPLETE" "$MODULE_DIR/main.tf"; then
            # Trouver la section environment_variables et ajouter la nouvelle variable
            if [ "$service_type" = "container-instance" ]; then
                sed -i '/PS_ERASE_DB.*$/a\      PS_INSTALL_COMPLETE = "1"' "$MODULE_DIR/main.tf"
            else
                # Pour Container Apps
                sed -i '/PS_ERASE_DB.*$/a\      env {\n        name  = "PS_INSTALL_COMPLETE"\n        value = "1"\n      }' "$MODULE_DIR/main.tf"
            fi
            
            echo "‚úÖ Variable ajout√©e au module"
        fi
    fi
    
    # Red√©ployer
    echo "üöÄ Red√©ploiement avec la nouvelle configuration..."
    
    terraform plan
    
    read -p "ü§î Continuer le red√©ploiement ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        terraform apply -auto-approve
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Red√©ploiement r√©ussi"
            echo "üéâ Le dossier install devrait maintenant √™tre supprim√©"
        else
            echo "‚ùå Erreur lors du red√©ploiement"
        fi
    fi
}

# Fonction pour configurer la suppression automatique de /install
setup_auto_remove_install() {
    echo "üîß Configuration de la suppression automatique du dossier install"
    
    cat << 'EOF' > post-install-script.sh
#!/bin/bash
# Script √† ex√©cuter apr√®s installation PrestaShop

echo "üßπ Suppression du dossier install..."
if [ -d "/var/www/html/install" ]; then
    rm -rf /var/www/html/install
    echo "‚úÖ Dossier install supprim√©"
else
    echo "‚ÑπÔ∏è  Dossier install d√©j√† supprim√©"
fi

echo "üîí S√©curisation des permissions..."
chown -R www-data:www-data /var/www/html/
chmod -R 755 /var/www/html/

echo "‚úÖ Post-installation termin√©e"
EOF
    
    chmod +x post-install-script.sh
    echo "üìù Script post-installation cr√©√©: post-install-script.sh"
}

# D√©tecter le type de service d√©ploy√©
detect_service_type() {
    if terraform show -json | jq -r '.values.root_module.child_modules[].address' | grep -q "module.container_app"; then
        echo "container-app"
    elif terraform show -json | jq -r '.values.root_module.child_modules[].address' | grep -q "module.container"; then
        echo "container-instance"
    else
        echo "unknown"
    fi
}

# Fonction principale
main() {
    SERVICE_TYPE=$(detect_service_type)
    
    echo "üîç Type de service d√©tect√©: $SERVICE_TYPE"
    echo ""
    
    case $SERVICE_TYPE in
        "container-app")
            handle_container_app
            ;;
        "container-instance")
            handle_container_instance
            ;;
        "unknown")
            echo "‚ùå Impossible de d√©tecter le type de service"
            echo "üí° V√©rifiez que l'infrastructure est bien d√©ploy√©e"
            exit 1
            ;;
    esac
    
    echo ""
    echo "üéâ Post-installation termin√©e !"
    echo ""
    echo "üîí Pour s√©curiser davantage votre PrestaShop:"
    echo "1. Changez le mot de passe admin"
    echo "2. Renommez le dossier /admin"
    echo "3. Configurez SSL/HTTPS"
    echo "4. Activez les sauvegardes"
}

# Lancement du script
main

cd - > /dev/null

---

# scripts/quick-remove-install.sh - Solution ultra rapide
#!/bin/bash

echo "‚ö° Suppression rapide du dossier install PrestaShop"
echo "================================================"

ENV="dev"
cd "terraform/environments/$ENV"

# M√©thode 1: Force refresh du container
echo "üîÑ M√©thode 1: Refresh du container..."

if terraform show -json | grep -q "azurerm_container_group"; then
    # Container Instance
    echo "üê≥ Container Instance d√©tect√©"
    RG=$(terraform output -raw resource_group_name)
    CONTAINER=$(terraform show -json | jq -r '.values.root_module.child_modules[] | select(.address=="module.container") | .resources[] | select(.type=="azurerm_container_group") | .values.name')
    
    echo "üîÑ Red√©marrage du container..."
    az container restart --resource-group "$RG" --name "$CONTAINER"
    
elif terraform show -json | grep -q "azurerm_container_app"; then
    # Container App
    echo "üì± Container App d√©tect√©"
    
    # Forcer un nouveau d√©ploiement en modifiant une variable
    echo "PS_INSTALL_REMOVED = \"$(date +%s)\"" >> terraform.tfvars
    
    echo "üöÄ Nouveau d√©ploiement..."
    terraform apply -auto-approve
    
    # Nettoyer la variable temporaire
    sed -i '/PS_INSTALL_REMOVED/d' terraform.tfvars
fi

echo ""
echo "‚úÖ Action termin√©e !"
echo "‚è≥ Attendez 2-3 minutes puis v√©rifiez votre site"
echo "üåê URL: $(terraform output -raw prestashop_url 2>/dev/null)"

cd - > /dev/null

---

# Solution alternative: Modifier la configuration Terraform
# terraform/modules/container-instance/main.tf - Ajouter cette variable

# Dans la section environment_variables, ajoutez:
# PS_INSTALL_AUTO = "0"  # D√©sactiver l'auto-install apr√®s la premi√®re fois

# Ou cr√©er un script de post-installation personnalis√©
cat > custom-prestashop-entrypoint.sh << 'EOF'
#!/bin/bash
# Entrypoint personnalis√© pour PrestaShop

# Si c'est la premi√®re installation, laisser le processus normal
if [ ! -f "/var/www/html/.installed" ]; then
    echo "üöÄ Premi√®re installation en cours..."
    # Lancer l'installation normale
    /tmp/docker_run.sh
    
    # Marquer comme install√© et supprimer le dossier install
    touch /var/www/html/.installed
    rm -rf /var/www/html/install
    echo "‚úÖ Installation termin√©e et dossier install supprim√©"
else
    echo "‚ÑπÔ∏è  PrestaShop d√©j√† install√©"
    # Juste d√©marrer Apache
    /usr/sbin/apache2ctl -D FOREGROUND
fi
EOF